AStarNode：
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum E_Node_Type
{
    Walk,
    Stop,

}
public class AStartNode 
{
    //格子对象的坐标
    public int x;
    public int y;
    //寻路消耗
    public float f;
    //离起点的距离
    public float g;
    //离终点的距离
    public float h;
    //父对象
    public AStartNode father;
    //格子的类型
    public E_Node_Type type;
    /// <summary>
    /// 构造函数，传入坐标和格子类型
    /// </summary>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <param name="type"></param>
    public AStartNode(int x,int y,E_Node_Type type)
    {

    }
}
AStarMgr:
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AStarMgr : NormalSingleton<AStarMgr>
{
    //地图的宽高
    private int mapW;
    private int mapH;
    //地图相关的所有格子对象的容器
    private AStartNode[,] nodes;
    //开启列表
    private List<AStartNode> openList;
    //关闭列表
    private List<AStartNode> closeList;
    /// <summary>
    /// 初始化地图信息
    /// </summary>
    /// <param name="w"></param>
    /// <param name="h"></param>
    public void InitMapInfo(int w, int h)
    {
        //根据宽高，创建格子，阻挡的问题，我们可以随机阻挡
        //因为我们没有地图的相关数据
        this.mapH = h;
        this.mapW = w;
        for (int i = 0; i < w; i++)
        {
            for (int j = 0; j < h; j++)
            {
                //我们这里的阻挡，只是为了给大家讲逻辑所以这样写
                //以后真正的项目中，都是从地图的配置文件里读取出来的
                AStartNode node = new AStartNode(i, j, Random.Range(0, 100) < 20 ? E_Node_Type.Stop : E_Node_Type.Walk);
                nodes[i, j] = node;
            }
        }
    }
    /// <summary>
    /// 寻路方法，提供给外部使用
    /// </summary>
    /// <param name="startPos"></param>
    /// <param name="endPos"></param>
    /// <returns></returns>
    public List<AStartNode> FindPath(Vector2 startPos, Vector2 endPos)
    {
        //实际项目中传入的是坐标系中的位置，我们省略换算步骤，直接认为她传进来的是格子坐标

        /*
         * 首先判断，传入的两个点是否合法
         * 要在地图范围内，要不是阻挡
         * 如果不合法，直接返回null，意味着不能寻路，
         * 应该得到起点和终点，对应的格子
         * 
         * 从起点开始，找周围的点，放入开启列表中
         * 坐上
         * 上
         * 右上
         * 左
         * 右
         * 左下
         * 下
         * 右下
         * 判断这些点，是否是边界，是否是阻挡，如果都不是，才放入开启列表中
         * 选出开启列表中，寻路消耗最小的点，
         * 放入关闭列表中，然后再从关闭列表中移除
         * 如果这个点已经是终点了，那么最终结果直接返回出去，如果这个点不是终点，那么继续寻路
         */
        //首先判断在地图范围内
        if (startPos.x < 0||startPos.x>=mapW || startPos.y<0||startPos.y>=mapH || endPos.x < 0 || endPos.x >= mapW || endPos.y < 0 || endPos.y >= mapH)
        {
            return null;
        }
        //不是阻挡
        AStartNode start = nodes[(int)startPos.x, (int)startPos.y];
        AStartNode end = nodes[(int)endPos.x,(int)endPos.y];
        if (start.type == E_Node_Type.Stop||end.type == E_Node_Type.Stop)
        {
            return null;
        }
        //把开始点放入关闭列表中
        closeList.Clear();
        openList.Clear();
        start.father = null;
        start.f = 0;
        start.g = 0;
        start.h = 0;
        closeList.Add(start);
        // *从起点开始，找周围的点，放入开启列表中
        //* 左上 x-1,y-1
        FindNearlyToOpenList(start.x -1,start.y -1,1.4f,start,end);
        //  *上
        FindNearlyToOpenList(start.x , start.y - 1, 1.4f, start, end);
        //  * 右上
        FindNearlyToOpenList(start.x + 1, start.y - 1, 1.4f, start, end);
        //  * 左
        FindNearlyToOpenList(start.x - 1, start.y , 1.4f, start, end);
        //  * 右
        FindNearlyToOpenList(start.x + 1, start.y , 1.4f, start, end);
        //  * 左下
        FindNearlyToOpenList(start.x - 1, start.y + 1, 1.4f, start, end);
        //  * 下
        FindNearlyToOpenList(start.x , start.y + 1, 1.4f, start, end);
        //  * 右下
        FindNearlyToOpenList(start.x + 1, start.y + 1, 1.4f, start, end);
        //死路判断，开启列表为空，还没有找到终点，就是死路
        if (openList.Count == 0)
        {
            Debug.Log("死路！");
            return null;
        }
        //选出开启列表中，寻路消耗最小的点，放入关闭列表中，然后才从开启列表中移除
        openList.Sort(SortOpenList);
        closeList.Add(openList[0]);
        openList.RemoveAt(0);
        //如果这个点已经是终点了，那么最终结果返回出去
        //如果不是终点，继续寻路
        if (start == end)
        {
            //找完了，找到路径
            List<AStartNode> path = new List<AStartNode>();
            path.Add(end);
            while (end.father!=null)
            {
                path.Add(end.father);
                end = end.father;
            }
            //列表翻转的API
            path.Reverse();
            return path;
        }
        return null;
    }
    private int  SortOpenList(AStartNode a,AStartNode b)
    {
        if (a.f > b.f)
            return 1;
        else if (a.f == b.f)
            return 1;
        else
            return -1;
    }
    /// <summary>
    /// 吧附近的点放入开启列表
    /// </summary>
    /// <param name="x"></param>
    /// <param name="y"></param>
    private void FindNearlyToOpenList(int x,int y,float g,AStartNode father,AStartNode end)
    {
        //边界判断
        if (x<0||x>=mapW||y<0||y>=mapH)
        {
            //在范围内，再去取点
            AStartNode node = nodes[x, y];
            if (node == null || node.type == E_Node_Type.Stop ||closeList.Contains(node)||openList.Contains(node))
            {
                return ;
            }
            //计算f值 f = g+h;
            //记录父对象
            node.father = father;
            //计算g，我离起点的距离，就是父亲离起点的距离 + 我离父亲的距离
            node.g = father.g + g;
            node.h = Mathf.Abs(end.x - node.x) +Mathf.Abs(end.y - node.y);
            node.f = node.g + node.h;
            //如果通过了上面的合法验证，就存到开启列表中
            openList.Add(node);
        }
    }
}
